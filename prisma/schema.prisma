// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_POOL_URL")
}

generator client {
  provider = "prisma-client-js"
}

// CONTENT

model Page {
  id          String       @id @default(cuid())
  title       String?
  content     String?
  webSrc      String?
  webUrl      String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  collections Collection[]

  @@map(name: "pages")
}

model Collection {
  id        String @id @default(cuid())
  title     String
  colorCode String
  pages     Page[]
  user      User   @relation(fields: [userId], references: [id])
  userId    String

  @@map(name: "collections")
}

// USERS 

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  pages         Page[]
  collections   Collection[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

// AUTHENTIFICATION

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verificationTokens")
}
